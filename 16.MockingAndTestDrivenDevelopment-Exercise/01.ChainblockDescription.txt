01.Chainblock
You need to implement a really fast data structure which will hold Transactions.

Transaction will hold:
• int Id – unique transaction id
•TransactionStatus Status – enumeration of work positions for the employee
•string From – the sender of the transaction
•string To – the receiver of the transaction
•double Amount – the salary of the employee

You need to support the following operations:
•Add() – Add a transaction to the record
•Contains(Transaction) – checks if a given transaction is present in the record
•Contains(id) – checks if a transaction with the given id exists in the record
•Count – returns the number of transactions in the record
•ChangeTransactionStatus(id, status) – changes the status of the transaction with the given id or throws ArgumentException if no such transaction exists
•RemoveTransactionById(id) – remove the transaction from the record if the id exists, otherwise throws InvalidOperationException
•GetById(id) – return the transaction with the given id, if such transaction doesn't exist, throw InvalidOperationException
•GetByTransactionStatus(status) – return the transactions with the given status ordered by amount descending,
if there are no transactions with the given status, throw InvalidOperationException
•GetAllSendersWithTransactionStatus(status) – returns all senders which have transactions with the given status ordered by transactions amount 
(if there are multiple transactions with the same sender, return them all), if no transactions exist, throw InvalidOperationException
•GetAllReceiversWithTransactionStatus(status) – returns all receivers which have transactions with the given status 
in the same way as GetAllSendersWithTransactionStatus, throw InvalidOperationException if no such transactions are present in the record
•GetAllOrderedByAmountDescendingThenById() – returns all transactions ordered by amount descending and by id,
if there are no such transactions throw InvalidOperationException
•GetBySenderOrderedByAmountDescending(sender) – search for all transactions with a specific sender and return them ordered by amount descending,
if there are no such transactions throw InvalidOperationException
•GetByReceiverOrderedByAmountThenById(receiver) – returns all transactions with particular receiver ordered by amount descending, then by id ascending,
if there are no such transactions throw InvalidOperationException
•GetByTransactionStatusAndMaximumAmount(status, amount) – returns all transactions with given status and amount less or equal to a maximum allowed amount
ordered by amount descending, if there are no such transactions throw InvalidOperationException
•GetBySenderAndMinimumAmountDescending(sender, amount) – returns all transactions with given sender and amount bigger than given amount
ordered by amount descending, if there are no such transactions throw InvalidOperationException
•GetByReceiverAndAmountRange(receiver, lo, hi) – returns all transactions with given receiver and amount between lo (inclusive) and hi (exclusive) 
ordered by amount descending then by id, if there are no such transactions throw InvalidOperationException
•GetAllInAmountRange(lo, hi) – returns all transactions within a range by insertion order (the range is inclusive),
if there are no such transactions throw InvalidOperationException